// Code generated by MockGen. DO NOT EDIT.
// Source: E:/gopath/src/crawler/domain/service/JobRecordService.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "syyx.com/crawler/domain/entity"
)

// MockIJobRecordService is a mock of IJobRecordService interface.
type MockIJobRecordService struct {
	ctrl     *gomock.Controller
	recorder *MockIJobRecordServiceMockRecorder
}

// MockIJobRecordServiceMockRecorder is the mock recorder for MockIJobRecordService.
type MockIJobRecordServiceMockRecorder struct {
	mock *MockIJobRecordService
}

// NewMockIJobRecordService creates a new mock instance.
func NewMockIJobRecordService(ctrl *gomock.Controller) *MockIJobRecordService {
	mock := &MockIJobRecordService{ctrl: ctrl}
	mock.recorder = &MockIJobRecordServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIJobRecordService) EXPECT() *MockIJobRecordServiceMockRecorder {
	return m.recorder
}

// AddJobRecord mocks base method.
func (m *MockIJobRecordService) AddJobRecord(jobrecord *entity.JobRecord) (*entity.JobRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddJobRecord", jobrecord)
	ret0, _ := ret[0].(*entity.JobRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddJobRecord indicates an expected call of AddJobRecord.
func (mr *MockIJobRecordServiceMockRecorder) AddJobRecord(jobrecord interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddJobRecord", reflect.TypeOf((*MockIJobRecordService)(nil).AddJobRecord), jobrecord)
}

// CreateJobExecute mocks base method.
func (m *MockIJobRecordService) CreateJobExecute(params map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobExecute", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateJobExecute indicates an expected call of CreateJobExecute.
func (mr *MockIJobRecordServiceMockRecorder) CreateJobExecute(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobExecute", reflect.TypeOf((*MockIJobRecordService)(nil).CreateJobExecute), params)
}

// DeleteExecuteJob mocks base method.
func (m *MockIJobRecordService) DeleteExecuteJob(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExecuteJob", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExecuteJob indicates an expected call of DeleteExecuteJob.
func (mr *MockIJobRecordServiceMockRecorder) DeleteExecuteJob(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExecuteJob", reflect.TypeOf((*MockIJobRecordService)(nil).DeleteExecuteJob), id)
}

// DeleteJobRecord mocks base method.
func (m *MockIJobRecordService) DeleteJobRecord(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobRecord", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJobRecord indicates an expected call of DeleteJobRecord.
func (mr *MockIJobRecordServiceMockRecorder) DeleteJobRecord(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobRecord", reflect.TypeOf((*MockIJobRecordService)(nil).DeleteJobRecord), id)
}

// DoExecuteJob mocks base method.
func (m *MockIJobRecordService) DoExecuteJob(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoExecuteJob", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoExecuteJob indicates an expected call of DoExecuteJob.
func (mr *MockIJobRecordServiceMockRecorder) DoExecuteJob(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoExecuteJob", reflect.TypeOf((*MockIJobRecordService)(nil).DoExecuteJob), id)
}

// EditJobRecord mocks base method.
func (m *MockIJobRecordService) EditJobRecord(id int, jobrecord *entity.JobRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditJobRecord", id, jobrecord)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditJobRecord indicates an expected call of EditJobRecord.
func (mr *MockIJobRecordServiceMockRecorder) EditJobRecord(id, jobrecord interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditJobRecord", reflect.TypeOf((*MockIJobRecordService)(nil).EditJobRecord), id, jobrecord)
}

// GetJobMetaById mocks base method.
func (m *MockIJobRecordService) GetJobMetaById(id int) (*entity.JobMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobMetaById", id)
	ret0, _ := ret[0].(*entity.JobMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobMetaById indicates an expected call of GetJobMetaById.
func (mr *MockIJobRecordServiceMockRecorder) GetJobMetaById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobMetaById", reflect.TypeOf((*MockIJobRecordService)(nil).GetJobMetaById), id)
}

// GetJobRecordById mocks base method.
func (m *MockIJobRecordService) GetJobRecordById(id int) (*entity.JobRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobRecordById", id)
	ret0, _ := ret[0].(*entity.JobRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobRecordById indicates an expected call of GetJobRecordById.
func (mr *MockIJobRecordServiceMockRecorder) GetJobRecordById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobRecordById", reflect.TypeOf((*MockIJobRecordService)(nil).GetJobRecordById), id)
}

// GetJobRecords mocks base method.
func (m *MockIJobRecordService) GetJobRecords(offset, pageSize int, conditions interface{}) ([]*entity.JobRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobRecords", offset, pageSize, conditions)
	ret0, _ := ret[0].([]*entity.JobRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobRecords indicates an expected call of GetJobRecords.
func (mr *MockIJobRecordServiceMockRecorder) GetJobRecords(offset, pageSize, conditions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobRecords", reflect.TypeOf((*MockIJobRecordService)(nil).GetJobRecords), offset, pageSize, conditions)
}

// StopExecuteJob mocks base method.
func (m *MockIJobRecordService) StopExecuteJob(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopExecuteJob", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopExecuteJob indicates an expected call of StopExecuteJob.
func (mr *MockIJobRecordServiceMockRecorder) StopExecuteJob(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopExecuteJob", reflect.TypeOf((*MockIJobRecordService)(nil).StopExecuteJob), id)
}
